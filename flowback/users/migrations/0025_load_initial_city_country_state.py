
# Generated by Django 2.2 on 2021-01-01 14:42
import os

from django.core.management import call_command
from django.core.serializers import base, python
from django.db import migrations

fixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../fixtures'))
fixture_filename_city = 'city-20210101.json'
fixture_filename_country = 'country-20210101.json'
fixture_filename_state = 'state-20210101.json'


def unload_fixture(apps, schema_editor):
    "Brutally deleting all entries for this model..."
    MyModel = apps.get_model("users", "City")
    MyModel.objects.all().delete()
    MyModel = apps.get_model("users", "State")
    MyModel.objects.all().delete()    
    MyModel = apps.get_model("users", "Country")
    MyModel.objects.all().delete()


def load_fixture(apps, schema_editor):
    # Save the old _get_model() function
    old_get_model = python._get_model

    # Define new _get_model() function here, which utilizes the apps argument to
    # get the historical version of a model. This piece of code is directly stolen
    # from django.core.serializers.python._get_model, unchanged. However, here it
    # has a different context, specifically, the apps variable.
    def _get_model(model_identifier):
        try:
            return apps.get_model(model_identifier)
        except (LookupError, TypeError):
            raise base.DeserializationError("Invalid model identifier: '%s'" % model_identifier)

    # Replace the _get_model() function on the module, so loaddata can utilize it.
    python._get_model = _get_model
    try:
        # Call loaddata command
        MyModel = apps.get_model("users", "City")
        MyModel.objects.all().delete()
        MyModel = apps.get_model("users", "State")
        MyModel.objects.all().delete()
        MyModel = apps.get_model("users", "Country")
        MyModel.objects.all().delete()

        fixture_file = os.path.join(fixture_dir, fixture_filename_country)
        call_command('loaddata', fixture_file, app_label='users')
        fixture_file = os.path.join(fixture_dir, fixture_filename_state)
        call_command('loaddata', fixture_file, app_label='users')
        fixture_file = os.path.join(fixture_dir, fixture_filename_city)
        call_command('loaddata', fixture_file, app_label='users')
        
    finally:
        # Restore old _get_model() function
        python._get_model = old_get_model



class Migration(migrations.Migration):

    dependencies = [
        ('users', '0024_city_country_state'),
    ]

    operations = [
        migrations.RunPython(load_fixture, reverse_code=unload_fixture),
    ]
